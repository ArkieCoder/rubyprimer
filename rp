#!/usr/bin/ruby

require 'bundler/setup'
require 'colorize'
require 'figlet'
require 'tempfile'
require 'rspec'
require 'rspec/core/formatters/progress_formatter'
require 'json'

load 'lib/justify.rb'
load 'lib/sayings.rb'

def print_header(header)
    puts ""
    puts "==========================="
    font = Figlet::Font.new('fonts/standard.flf')
    figlet = Figlet::Typesetter.new(font)
    puts figlet[header].magenta
    puts "==========================="
    puts ""
end

def print_welcome()
    message = <<-WELCOME


    Welcome to the Ruby Primer.  This is a console version of the Ruby Primer
    found at http://rubymonk.com/learning/books/1-ruby-primer, maintained
    by C42 Engineering.  This is a program written in ruby that runs actual
    ruby code snippets in the ruby interpreter on your system.  It is intended
    to be interactive, fun, and educational.  Enjoy!

    WELCOME
    puts message.yellow
end

def get_input(question)
    print question
    STDOUT.flush
    STDIN.gets.chomp
end

def print_paragraph(para, mod=nil)
    paratext = para.chomp.justify.cyan
    if mod
        puts paratext.send(mod)
    else
        puts paratext
    end 
    puts ""
end

def print_example(example, test=false, example_id=nil) 
    print_paragraph("Example Code:", "underline")
    print_paragraph(example, "green")
    ans = get_input("Type 'edit' to edit the code in vim, or type 'run' to run the code: ")
    if ans.downcase == "edit"
        puts "Editing code ..."
	edited_code = edit_code(example)
	print_example(edited_code, test, example_id)
    elsif ans.downcase == "run"
        puts "Running code ..."
	if test
            test_code(example, example_id)
        else	    
	    run_code(example)
	end
    else
        puts ""
        puts "         ERROR: I'm not sure what you mean by '#{ans}' ... please try again".red
	puts ""
	print_example(example, test, example_id)
    end
end

def get_example(example_id) 
    file = File.new("examples/#{example_id}.rb", "r")
    contents = file.read
    file.close
    contents
end

def write_code_to_tmpfile(code)
    file = Tempfile.new('rubyprimer')
    ObjectSpace.undefine_finalizer(file)
    file.write(code)
    path = file.path
    file.close
    path
end

def read_file_and_remove(path)
    contents = File.read(path)
    File.unlink(path)
    contents
end

def edit_code(code)
    path = write_code_to_tmpfile(code)
    command = "/usr/bin/vim #{path}"
    pid = spawn(command)
    Process.wait(pid)
    read_file_and_remove(path)
end

def decorate_output(location) 
    if location == "top"
        puts "#### Output: ####".bold.light_green
    elsif location == "bottom"
        puts "#################".bold.light_green 
    end
end

def run_code(code, decorate=true)
    decorate_output("top") unless !decorate
    command = "#{RbConfig.ruby} -e '#{code}'"
    pid = spawn(command)
    Process.wait(pid)
    puts ""
    decorate_output("bottom") unless !decorate
end

def test_code(code, example_id) 
    path = write_code_to_tmpfile(code)
    spec = File.read("examples_spec/#{example_id}.rb")
    spec.sub! '__TMPFILE__', path
    test_path = write_code_to_tmpfile(spec)
    decorate_output("top")

    run_code(code, false)

    config = RSpec.configuration
    config.color = true
    RSpec.clear_examples
    status = RSpec::Core::Runner.run([test_path])

    should_rerun = false
    if status == 0
	    puts ""
        puts "---> SUCCESS:  #{Sayings.get_saying('happy')}".bold.light_yellow
	    puts ""
    else
	    puts ""
        puts "---> WHOOPS:  #{Sayings.get_saying('sad')}".bold.light_red
	    puts ""
	    should_rerun = true
    end
    decorate_output("bottom")

    File.unlink(path)
    File.unlink(test_path)

    if should_rerun
        print_example(get_example(example_id), true, example_id)
    end
end

def press_enter()
    get_input("Press ENTER to continue")
end

def read_json_file(file_name)
    file = File.read(file_name)
    JSON.parse(file)
end

def process_toc(lesson_id=nil)
    toc = read_json_file('lessons/toc.json')

    toc['lessons'].each do |lesson_file|
        if lesson_id 
            if lesson_file == "#{lesson_id}.json"
                print_paragraph("\n\nSkipping to lesson: #{lesson_id}!")
                process_lesson("lessons/#{lesson_id}.json")
            end
        else
            process_lesson("lessons/#{lesson_file}")
        end
    end
end

def process_lesson(lesson_file)
    lesson = read_json_file(lesson_file)
    lesson['subsections'].each do |subsection|
        print_header(subsection['name'])
        subsection['items'].each do |item|
            case item['type']
                when "press_enter"
                    press_enter()
	            when "paragraph"
                    print_paragraph(item['value'])
	            when "example"
                    print_example(get_example(item['value']))
	            when "test_example"
                    print_example(get_example(item['value']), true, item['value'])
            end
	    end
    end
end

def main(args)
    print_welcome()
    press_enter()
    lesson_id = args[0]
    process_toc(lesson_id)
end
########################################################
main(ARGV)
